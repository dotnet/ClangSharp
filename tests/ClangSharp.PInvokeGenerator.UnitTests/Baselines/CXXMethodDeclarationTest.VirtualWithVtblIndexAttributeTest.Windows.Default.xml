<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
  <namespace name="ClangSharp.Test">
    <struct name="MyStruct" access="public" vtbl="true" unsafe="true">
      <field name="lpVtbl" access="public">
        <type>void**</type>
      </field>
      <function name="MyVoidMethod" access="public" unsafe="true" vtblindex="0">
        <type>void</type>
        <body>
          <code>((delegate* unmanaged[Thiscall]&lt;MyStruct*, void&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(MyStruct*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="MyInt8Method" access="public" unsafe="true" vtblindex="1">
        <type native="char">sbyte</type>
        <body>
          <code>return ((delegate* unmanaged[Thiscall]&lt;MyStruct*, sbyte&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(MyStruct*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="MyInt32Method" access="public" unsafe="true" vtblindex="2">
        <type>int</type>
        <body>
          <code>return ((delegate* unmanaged[Thiscall]&lt;MyStruct*, int&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(MyStruct*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="MyVoidStarMethod" access="public" unsafe="true" vtblindex="3">
        <type>void*</type>
        <body>
          <code>return ((delegate* unmanaged[Thiscall]&lt;MyStruct*, void*&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(MyStruct*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
    </struct>
  </namespace>
</bindings>
