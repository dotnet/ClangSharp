<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
  <namespace name="ClangSharp.Test">
    <struct name="MyStruct" access="public" vtbl="true" unsafe="true">
      <field name="lpVtbl" access="public">
        <type>void**</type>
      </field>
      <function name="GetType" access="public" unsafe="true">
        <type>int</type>
        <param name="obj">
          <type>int</type>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Thiscall]&lt;MyStruct*, int, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(MyStruct*)Unsafe.AsPointer(ref this)</param>, <param name="obj">obj</param>);</code>
        </body>
      </function>
      <function name="GetType" access="public" unsafe="true">
        <type>int</type>
        <body>
          <code>return ((delegate* unmanaged[Thiscall]&lt;MyStruct*, int&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(MyStruct*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="GetType" access="public" unsafe="true">
        <type>int</type>
        <param name="objA">
          <type>int</type>
        </param>
        <param name="objB">
          <type>int</type>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Thiscall]&lt;MyStruct*, int, int, int&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(MyStruct*)Unsafe.AsPointer(ref this)</param>, <param name="objA">objA</param>, <param name="objB">objB</param>);</code>
        </body>
      </function>
    </struct>
  </namespace>
</bindings>
